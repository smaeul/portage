diff --git chromium-85.0.4183.83/chrome/browser/about_flags.cc chromium-85.0.4183.83/chrome/browser/about_flags.cc
index 7ccb423eae..6b268cd258 100644
--- chromium-85.0.4183.83/chrome/browser/about_flags.cc
+++ chromium-85.0.4183.83/chrome/browser/about_flags.cc
@@ -259,6 +259,19 @@ const unsigned kOsDesktop = kOsMac | kOsWin | kOsLinux | kOsCrOS;
 const unsigned kOsAura = kOsWin | kOsLinux | kOsCrOS;
 #endif  // USE_AURA || OS_ANDROID
 
+const FeatureEntry::Choice kShowAvatarButtonChoices[] = {
+    {flags_ui::kGenericExperimentChoiceDefault, "", ""},
+    {"Always",
+     "show-avatar-button",
+     "always"},
+    {"Incognito and Guest",
+     "show-avatar-button",
+     "incognito-and-guest"},
+    {"Never",
+     "show-avatar-button",
+     "never"}
+};
+
 const FeatureEntry::Choice kTouchEventFeatureDetectionChoices[] = {
     {flags_ui::kGenericExperimentChoiceDisabled, "", ""},
     {flags_ui::kGenericExperimentChoiceEnabled,
@@ -4365,6 +4378,11 @@ const FeatureEntry kFeatureEntries[] = {
      FEATURE_VALUE_TYPE(arc::kEnableUnifiedAudioFocusFeature)},
 #endif  // defined(OS_CHROMEOS)
 
+    {"show-avatar-button",
+     "Show avatar/people/profile button",
+     "Show avatar/people/profile button in the browser toolbar", kOsDesktop,
+     MULTI_VALUE_TYPE(kShowAvatarButtonChoices)},
+
 #if defined(OS_WIN)
     {"use-angle", flag_descriptions::kUseAngleName,
      flag_descriptions::kUseAngleDescription, kOsWin,
diff --git chromium-85.0.4183.83/chrome/browser/ui/views/toolbar/toolbar_view.cc chromium-85.0.4183.83/chrome/browser/ui/views/toolbar/toolbar_view.cc
index bb07dd6f1b..2103490b1b 100644
--- chromium-85.0.4183.83/chrome/browser/ui/views/toolbar/toolbar_view.cc
+++ chromium-85.0.4183.83/chrome/browser/ui/views/toolbar/toolbar_view.cc
@@ -223,14 +223,30 @@ void ToolbarView::Init() {
 
   std::unique_ptr<ToolbarAccountIconContainerView>
       toolbar_account_icon_container;
+
+  const base::CommandLine& command_line =
+      *base::CommandLine::ForCurrentProcess();
+  const std::string flag_value =
+      command_line.GetSwitchValueASCII("show-avatar-button");
+
+  bool in_incognito_or_guest_mode = browser_->profile()->IsOffTheRecord() ||
+                                    browser_->profile()->IsGuestSession();
+
   bool show_avatar_toolbar_button = true;
 #if defined(OS_CHROMEOS)
   if (!base::FeatureList::IsEnabled(chromeos::features::kAvatarToolbarButton)) {
     // ChromeOS only badges Incognito and Guest icons in the browser window.
-    show_avatar_toolbar_button = browser_->profile()->IsOffTheRecord() ||
-                                 browser_->profile()->IsGuestSession();
+    show_avatar_toolbar_button = in_incognito_or_guest_mode;
   }
 #endif
+
+  if (flag_value == "always")
+    show_avatar_toolbar_button = true;
+  else if (flag_value == "incognito-and-guest")
+    show_avatar_toolbar_button = in_incognito_or_guest_mode;
+  else if (flag_value == "never")
+    show_avatar_toolbar_button = false;
+
   if (base::FeatureList::IsEnabled(
           autofill::features::kAutofillEnableToolbarStatusChip)) {
     // The avatar button is contained inside the page-action container and
