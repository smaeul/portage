updates for musl
--- cffi-1.11.4/c/test_c.py
+++ cffi-1.11.4/c/test_c.py
@@ -86,7 +86,6 @@ def test_all_rtld_symbols():
     if sys.platform.startswith("linux"):
         RTLD_NODELETE
         RTLD_NOLOAD
-        RTLD_DEEPBIND
 
 def test_new_primitive_type():
     py.test.raises(KeyError, new_primitive_type, "foo")
@@ -1214,7 +1214,7 @@ def test_load_and_call_function():
 def test_read_variable():
     ## FIXME: this test assumes glibc specific behavior, it's not compliant with C standard
     ## https://bugs.pypy.org/issue1643
-    if not sys.platform.startswith("linux"):
+    if True:
         py.test.skip("untested")
     BVoidP = new_pointer_type(new_void_type())
     ll = find_and_load_library('c')
@@ -1224,7 +1224,7 @@ def test_read_variable():
 def test_read_variable_as_unknown_length_array():
     ## FIXME: this test assumes glibc specific behavior, it's not compliant with C standard
     ## https://bugs.pypy.org/issue1643
-    if not sys.platform.startswith("linux"):
+    if True:
         py.test.skip("untested")
     BCharP = new_pointer_type(new_primitive_type("char"))
     BArray = new_array_type(BCharP, None)
@@ -1236,7 +1236,7 @@ def test_read_variable_as_unknown_length_array():
 def test_write_variable():
     ## FIXME: this test assumes glibc specific behavior, it's not compliant with C standard
     ## https://bugs.pypy.org/issue1643
-    if not sys.platform.startswith("linux"):
+    if True:
         py.test.skip("untested")
     BVoidP = new_pointer_type(new_void_type())
     ll = find_and_load_library('c')
--- cffi-1.11.4/testing/cffi0/test_function.py
+++ cffi-1.11.4/testing/cffi0/test_function.py
@@ -13,7 +13,7 @@ except ImportError:
     from io import StringIO
 
 
-lib_m = 'm'
+lib_m = 'c'
 if sys.platform == 'win32':
     #there is a small chance this fails on Mingw via environ $CC
     import distutils.ccompiler
@@ -166,7 +166,7 @@ class TestFunction(object):
                        b"hello, world!\n"
                        b"hello, world2!\n"
                        b"hello int 42 long 84 long long 168\n"
-                       b"hello (nil)\n")
+                       b"hello 0\n")
 
     def test_must_specify_type_of_vararg(self):
         ffi = FFI(backend=self.Backend())
@@ -249,7 +249,7 @@ class TestFunction(object):
         assert res == 5
 
     def test_write_variable(self):
-        if not sys.platform.startswith('linux'):
+        if True:
             py.test.skip("probably no symbol 'stdout' in the lib")
         ffi = FFI(backend=self.Backend())
         ffi.cdef("""
--- cffi-1.14.0/testing/cffi0/test_ownlib.py
+++ cffi-1.14.0/testing/cffi0/test_ownlib.py
@@ -376,14 +376,14 @@ class TestOwnLib(object):
         if self.module is None:
             py.test.skip("fix the auto-generation of the tiny test lib")
         if sys.platform == 'win32':
-            py.test.skip("uses 'dl' explicitly")
+            py.test.skip("uses 'c' explicitly")
         if self.__class__.Backend is CTypesBackend:
             py.test.skip("not for the ctypes backend")
         backend = self.Backend()
         ffi1 = FFI(backend=backend)
         ffi1.cdef("""void *dlopen(const char *filename, int flags);
                      int dlclose(void *handle);""")
-        lib1 = ffi1.dlopen('dl')
+        lib1 = ffi1.dlopen('c')
         handle = lib1.dlopen(self.module.encode(sys.getfilesystemencoding()),
                              backend.RTLD_LAZY)
         assert ffi1.typeof(handle) == ffi1.typeof("void *")
--- cffi-1.11.4/testing/cffi0/test_parsing.py
+++ cffi-1.11.4/testing/cffi0/test_parsing.py
@@ -74,7 +74,7 @@ class FakeFunction(object):
         self.BType = str(BType)
         self.name = name
 
-lib_m = "m"
+lib_m = "c"
 if sys.platform == 'win32':
     #there is a small chance this fails on Mingw via environ $CC
     import distutils.ccompiler
--- cffi-1.11.4/testing/cffi0/test_unicode_literals.py
+++ cffi-1.11.4/testing/cffi0/test_unicode_literals.py
@@ -10,7 +10,7 @@ from __future__ import unicode_literals
 import sys, math
 from cffi import FFI
 
-lib_m = "m"
+lib_m = "c"
 if sys.platform == 'win32':
     #there is a small chance this fails on Mingw via environ $CC
     import distutils.ccompiler
--- cffi-1.11.4/testing/cffi0/test_verify.py
+++ cffi-1.11.4/testing/cffi0/test_verify.py
@@ -1612,7 +1612,7 @@ def test_keepalive_ffi():
     assert func() == 42
 
 def test_FILE_stored_in_stdout():
-    if not sys.platform.startswith('linux'):
+    if True:
         py.test.skip("likely, we cannot assign to stdout")
     ffi = FFI()
     ffi.cdef("int printf(const char *, ...); FILE *setstdout(FILE *);")
--- cffi-1.14.0/testing/cffi1/test_re_python.py
+++ cffi-1.14.0/testing/cffi1/test_re_python.py
@@ -265,11 +265,11 @@ def test_dlopen_handle():
     import _cffi_backend
     from re_python_pysrc import ffi
     if sys.platform == 'win32':
-        py.test.skip("uses 'dl' explicitly")
+        py.test.skip("uses 'c' explicitly")
     ffi1 = FFI()
     ffi1.cdef("""void *dlopen(const char *filename, int flags);
                  int dlclose(void *handle);""")
-    lib1 = ffi1.dlopen('dl')
+    lib1 = ffi1.dlopen('c')
     handle = lib1.dlopen(extmod.encode(sys.getfilesystemencoding()),
                          _cffi_backend.RTLD_LAZY)
     assert ffi1.typeof(handle) == ffi1.typeof("void *")
--- cffi-1.11.4/testing/cffi1/test_verify1.py
+++ cffi-1.11.4/testing/cffi1/test_verify1.py
@@ -1576,7 +1576,7 @@ def test_keepalive_ffi():
     assert func() == 42
 
 def test_FILE_stored_in_stdout():
-    if not sys.platform.startswith('linux'):
+    if True:
         py.test.skip("likely, we cannot assign to stdout")
     ffi = FFI()
     ffi.cdef("int printf(const char *, ...); FILE *setstdout(FILE *);")
