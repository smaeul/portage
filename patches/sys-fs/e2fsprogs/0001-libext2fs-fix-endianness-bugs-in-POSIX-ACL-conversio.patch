From 396510d6d23ac010594cd93d93179aa5cb639edb Mon Sep 17 00:00:00 2001
From: Samuel Holland <samuel@sholland.org>
Date: Fri, 28 May 2021 22:02:51 -0500
Subject: [PATCH 1/2] libext2fs: fix endianness bugs in POSIX ACL conversions

Both the POSIX and EXT4 on-disk ACL formats contain little-endian
integers. Conversely, the ACL tag constants (ACL_USER_OBJ, etc.
from ext4_acl.h) are defined as native-endian integers.

This commit fixes two separate bugs in the ACL conversion routines:
  1) The tags read from the xattr value must be converted to native
     endianness before using them to control the switch statement.
  2) The remaining members must *not* be byte-swapped when copying
     them from one structure to the other.

Due to the first bug, and the lack of error handling in the switch
statement, POSIX ACLs were silently ignored by mke2fs when running
on a big endian system. This caused the m_rootdir_acl test to fail:

  ~-- m_rootdir_acl/expect
  ~++ m_rootdir_acl.log
  @@ -105,15 +105,15 @@
   debugfs: ea_list acl_dir
   Extended attributes:
     system.data (0)
  -  system.posix_acl_access (28) = 01 00 00 00 01 00 07 00 04 ...
  -  system.posix_acl_default (28) = 01 00 00 00 01 00 07 00 04 ...
  +  system.posix_acl_access (4) = 01 00 00 00
  +  system.posix_acl_default (4) = 01 00 00 00
   debugfs: ea_list acl_dir/file
   Extended attributes:
     system.data (0)
  -  system.posix_acl_access (28) = 01 00 00 00 01 00 07 00 04 ...
  +  system.posix_acl_access (4) = 01 00 00 00
   Pass 1: Checking inodes, blocks, and sizes
   Pass 2: Checking directory structure
   Pass 3: Checking directory connectivity

Signed-off-by: Samuel Holland <samuel@sholland.org>
---
 lib/ext2fs/ext_attr.c | 17 +++++++++--------
 1 file changed, 9 insertions(+), 8 deletions(-)

diff --git a/lib/ext2fs/ext_attr.c b/lib/ext2fs/ext_attr.c
index 148fae5b..5e5e162c 100644
--- a/lib/ext2fs/ext_attr.c
+++ b/lib/ext2fs/ext_attr.c
@@ -556,10 +556,11 @@ static errcode_t convert_posix_acl_to_disk_buffer(const void *value, size_t size
 	s = sizeof(ext4_acl_header);
 	for (end = entry + count; entry != end;entry++) {
 		ext4_acl_entry *disk_entry = (ext4_acl_entry*) e;
-		disk_entry->e_tag = ext2fs_cpu_to_le16(entry->e_tag);
-		disk_entry->e_perm = ext2fs_cpu_to_le16(entry->e_perm);
 
-		switch(entry->e_tag) {
+		disk_entry->e_tag = entry->e_tag;
+		disk_entry->e_perm = entry->e_perm;
+
+		switch (ext2fs_le16_to_cpu(entry->e_tag)) {
 			case ACL_USER_OBJ:
 			case ACL_GROUP_OBJ:
 			case ACL_MASK:
@@ -569,7 +570,7 @@ static errcode_t convert_posix_acl_to_disk_buffer(const void *value, size_t size
 				break;
 			case ACL_USER:
 			case ACL_GROUP:
-				disk_entry->e_id =  ext2fs_cpu_to_le32(entry->e_id);
+				disk_entry->e_id = entry->e_id;
 				e += sizeof(ext4_acl_entry);
 				s += sizeof(ext4_acl_entry);
 				break;
@@ -608,10 +609,10 @@ static errcode_t convert_disk_buffer_to_posix_acl(const void *value, size_t size
 	while (size > 0) {
 		const ext4_acl_entry *disk_entry = (const ext4_acl_entry *) cp;
 
-		entry->e_tag = ext2fs_le16_to_cpu(disk_entry->e_tag);
-		entry->e_perm = ext2fs_le16_to_cpu(disk_entry->e_perm);
+		entry->e_tag = disk_entry->e_tag;
+		entry->e_perm = disk_entry->e_perm;
 
-		switch(entry->e_tag) {
+		switch (ext2fs_le16_to_cpu(entry->e_tag)) {
 			case ACL_USER_OBJ:
 			case ACL_GROUP_OBJ:
 			case ACL_MASK:
@@ -622,7 +623,7 @@ static errcode_t convert_disk_buffer_to_posix_acl(const void *value, size_t size
 				break;
 			case ACL_USER:
 			case ACL_GROUP:
-				entry->e_id = ext2fs_le32_to_cpu(disk_entry->e_id);
+				entry->e_id = disk_entry->e_id;
 				cp += sizeof(ext4_acl_entry);
 				size -= sizeof(ext4_acl_entry);
 				break;
-- 
2.26.3

