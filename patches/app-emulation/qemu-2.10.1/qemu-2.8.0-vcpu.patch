diff --git qemu-2.8.0/cpus.c qemu-fixed/cpus.c
index 5213351..32e65c2 100644
--- qemu-2.8.0/cpus.c
+++ qemu-fixed/cpus.c
@@ -53,7 +53,9 @@
 
 #ifdef CONFIG_LINUX
 
+#include <stdint.h>
 #include <sys/prctl.h>
+#include <unistd.h>
 
 #ifndef PR_MCE_KILL
 #define PR_MCE_KILL 33
@@ -1418,10 +1420,13 @@ static void qemu_tcg_init_vcpu(CPUState *cpu)
     }
 }
 
+extern int vcpu_affinity[];
 static void qemu_kvm_start_vcpu(CPUState *cpu)
 {
     char thread_name[VCPU_THREAD_NAME_SIZE];
 
+    cpu_set_t cpuset;
+
     cpu->thread = g_malloc0(sizeof(QemuThread));
     cpu->halt_cond = g_malloc0(sizeof(QemuCond));
     qemu_cond_init(cpu->halt_cond);
@@ -1429,6 +1434,15 @@ static void qemu_kvm_start_vcpu(CPUState *cpu)
              cpu->cpu_index);
     qemu_thread_create(cpu->thread, thread_name, qemu_kvm_cpu_thread_fn,
                        cpu, QEMU_THREAD_JOINABLE);
+
+    if (vcpu_affinity[cpu->cpu_index] != -1) {
+        printf("Pinning vcpu %d to Physical CPU %d\n",
+               cpu->cpu_index, vcpu_affinity[cpu->cpu_index]);
+        CPU_ZERO(&cpuset);
+        CPU_SET(vcpu_affinity[cpu->cpu_index], &cpuset);
+        pthread_setaffinity_np((cpu->thread)->thread, sizeof(cpu_set_t), &cpuset);
+    }
+
     while (!cpu->created) {
         qemu_cond_wait(&qemu_cpu_cond, &qemu_global_mutex);
     }
diff --git qemu-2.8.0/qemu-options.hx qemu-fixed/qemu-options.hx
index c534a2f..88a59da 100644
--- qemu-2.8.0/qemu-options.hx
+++ qemu-fixed/qemu-options.hx
@@ -118,6 +118,16 @@ given, the total number of CPUs @var{n} can be omitted. @var{maxcpus}
 specifies the maximum number of hotpluggable CPUs.
 ETEXI
 
+DEF("vcpu", HAS_ARG, QEMU_OPTION_vcpu,
+    "-vcpu [vcpunum=]n[,affinity=affinity]\n"
+    "-vcpu [vcpunum=]n[,affinity=affinity]\n", QEMU_ARCH_ALL)
+STEXI
+@item -vcpu [vcpunum=]@var{n}[,affinity=@var{affinity}]
+@itemx -vcpu [vcpunum=]@var{n}[,affinity=@var{affinity}]
+@findex -vcpu
+VCPU Affinity. If specified, specify for all the CPUs.
+ETEXI
+
 DEF("numa", HAS_ARG, QEMU_OPTION_numa,
     "-numa node[,mem=size][,cpus=cpu[-cpu]][,nodeid=node]\n"
     "-numa node[,memdev=id][,cpus=cpu[-cpu]][,nodeid=node]\n", QEMU_ARCH_ALL)
diff --git qemu-2.8.0/vl.c qemu-fixed/vl.c
index d77dd86..ff52396 100644
--- qemu-2.8.0/vl.c
+++ qemu-fixed/vl.c
@@ -127,6 +127,8 @@ int main(int argc, char **argv)
 #define MAX_VIRTIO_CONSOLES 1
 #define MAX_SCLP_CONSOLES 1
 
+#define MAX_VCPUS 32
+
 static const char *data_dir[16];
 static int data_dir_idx;
 const char *bios_name = NULL;
@@ -159,6 +161,8 @@ int smp_cpus = 1;
 int max_cpus = 1;
 int smp_cores = 1;
 int smp_threads = 1;
+int vcpu_affinity[MAX_VCPUS];
+int num_affinity = 0;
 int acpi_enabled = 1;
 int no_hpet = 0;
 int fd_bootchk = 1;
@@ -1218,6 +1222,61 @@ static void default_drive(int enable, int snapshot, BlockInterfaceType type,
 
 }
 
+static QemuOptsList qemu_vcpu_opts = {
+    .name = "vcpu-opts",
+    .implied_opt_name = "vcpunum",
+    .head = QTAILQ_HEAD_INITIALIZER(qemu_vcpu_opts.head),
+    .desc = {
+        {
+            .name = "vcpunum",
+            .type = QEMU_OPT_NUMBER,
+        }, {
+            .name = "affinity",
+            .type = QEMU_OPT_NUMBER,
+       },
+        { /*End of list */ }
+    },
+};
+
+static int parse_vcpu(void *opaque, QemuOpts *opts, Error **errp)
+{
+   if (opts){
+     unsigned vcpu = qemu_opt_get_number(opts,"vcpunum",0);
+     unsigned affinity = qemu_opt_get_number(opts,"affinity",0);
+
+     if (vcpu < smp_cores) {
+             if (vcpu_affinity[vcpu] == -1){
+                    vcpu_affinity[vcpu] = affinity;
+            }
+             else {
+               error_report("Duplicate affinity statement for vcpu %d\n",vcpu);
+               return -1;
+             }
+            num_affinity += 1;
+     }
+     else {
+       error_report("VCPU %d is more than allowed %d VCPUs in the system\n",vcpu,smp_cores);
+       return -1;
+     }
+   }
+   return 0;
+}
+
+static void parse_vcpu_opts(MachineClass *mc)
+{
+    int i;
+    for (i = 0; i < MAX_VCPUS; i++)
+      vcpu_affinity[i] = -1;
+
+    if (qemu_opts_foreach(qemu_find_opts("vcpu-opts"), parse_vcpu, NULL, NULL)) {
+        exit(1);
+    }
+
+    if (num_affinity != smp_cores) {
+      fprintf(stderr, "Warning: affinity is not specified for some (%d) of the %d smp cores. Will be using default mask\n", (smp_cores-num_affinity), smp_cores);
+    }
+}
+
 static QemuOptsList qemu_smp_opts = {
     .name = "smp-opts",
     .implied_opt_name = "cpus",
@@ -3061,6 +3120,7 @@ int main(int argc, char **argv, char **envp)
     qemu_add_opts(&qemu_machine_opts);
     qemu_add_opts(&qemu_mem_opts);
     qemu_add_opts(&qemu_smp_opts);
+    qemu_add_opts(&qemu_vcpu_opts);
     qemu_add_opts(&qemu_boot_opts);
     qemu_add_opts(&qemu_sandbox_opts);
     qemu_add_opts(&qemu_add_fd_opts);
@@ -3773,6 +3833,12 @@ int main(int argc, char **argv, char **envp)
                     exit(1);
                 }
                 break;
+            case QEMU_OPTION_vcpu:
+                if (!qemu_opts_parse_noisily(qemu_find_opts("vcpu-opts"),
+                                             optarg, true)) {
+                    exit(1);
+                }
+                break;
             case QEMU_OPTION_vnc:
                 vnc_parse(optarg, &error_fatal);
                 break;
@@ -4177,6 +4243,7 @@ int main(int argc, char **argv, char **envp)
         exit(1);
     }
 
+    parse_vcpu_opts(machine_class);
     /*
      * Get the default machine options from the machine if it is not already
      * specified either by the configuration file or by the command line.
